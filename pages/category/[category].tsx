import { GetServerSideProps, NextPage } from "next";
import { AxiosResponse } from "axios";
import Head from "next/head";
import qs from "qs";

import { fetchArticles, fetchCategories } from "../../http";
import {
  ICollectionResponse,
  ICategory,
  IPagination,
  IArticle,
  IQueryOptions,
} from "../../types";
import Tabs from "../../components/Tabs";
import ArticleList from "../../components/ArticleList";
import Pagination from "../../components/Pagination";
import { capitalyzeFirstLetter, debounce, makeCategory } from "../../utils";
import { useRouter } from "next/router";

interface IPropTypes {
  categories: {
    items: ICategory[];
    pagination: IPagination;
  };
  articles: {
    items: IArticle[];
    pagination: IPagination;
  };
  slug: string;
}

const Category: NextPage<IPropTypes> = ({ categories, articles, slug }) => {
  const router = useRouter();

  const formatCategory = (slug: string) => {
    return capitalyzeFirstLetter(makeCategory(slug));
  };

  const handleOnSearch = (query: string) => {
    router.push(`/category/${slug}?search=${query}`);
  };

  const { page, pageCount } = articles.pagination;
  return (
    <>
      <Head>
        <title>{`Coder&apos;s Blog | ${formatCategory(slug)}`}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Tabs
        categories={categories.items}
        handleOnSearch={debounce(handleOnSearch, 500)}
      />
      <ArticleList articles={articles.items} />
      <Pagination
        page={page}
        pageCount={pageCount}
        redirectUrl={`/category/${slug}`}
      />
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const options: Partial<IQueryOptions> = {
    populate: ["author.avatar"],
    sort: ["id:desc"],
    filters: {
      category: {
        slug: query.category,
      },
    },
    pagination: {
      page: query.page ? +query.page : 1,
      pageSize: 1,
    },
  };

  if (query.search) {
    options.filters = {
      Title: {
        $contains: query.search,
      },
    };
  }

  const queryString = qs.stringify(options);

  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> =
    await fetchArticles(queryString);

  const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> =
    await fetchCategories();

  return {
    props: {
      categories: {
        items: categories.data,
        pagination: categories.meta.pagination,
      },
      articles: {
        items: articles.data,
        pagination: articles.meta.pagination,
      },
      slug: query.category,
    },
  };
};

export default Category;
